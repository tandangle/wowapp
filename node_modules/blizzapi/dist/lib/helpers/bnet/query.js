"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const validators_1 = require("../validators");
const oauth_1 = require("../oauth");
const api_1 = require("../../utils/api");
const fetch_1 = require("../fetch");
const queryWithAccessToken = (queryOptions, accessToken) => {
    const { region, endpoint } = queryOptions;
    const validEndpoint = validators_1.endpoint(endpoint);
    if (!validEndpoint)
        throw new RangeError(`${endpoint} is not a valid endpoint.`);
    const apiHost = api_1.getApiHostByRegion(region);
    const requestUri = `${apiHost}${endpoint}`;
    const headers = {
        Authorization: `Bearer ${accessToken}`,
    };
    return fetch_1.fetchFromUri({
        headers,
        uri: requestUri,
        method: 'GET',
    });
};
exports.default = (queryOptions) => __awaiter(void 0, void 0, void 0, function* () {
    const { region, accessToken } = queryOptions;
    const { validateAccessTokenOnEachQuery, refreshExpiredAccessToken, onAccessTokenExpired, onAccessTokenRefresh, } = queryOptions.options;
    if (validateAccessTokenOnEachQuery) {
        const invalidAccessToken = !(yield oauth_1.validateAccessToken(region, accessToken));
        if (invalidAccessToken) {
            return {
                error: 'access_token_invalid',
            };
        }
    }
    try {
        const data = yield queryWithAccessToken(queryOptions, accessToken);
        return data;
    }
    catch (error) {
        if (error.response && error.response.status === 401) {
            onAccessTokenExpired && onAccessTokenExpired();
            if (refreshExpiredAccessToken) {
                const newAccessToken = yield oauth_1.getAccessToken(queryOptions);
                onAccessTokenRefresh && onAccessTokenRefresh(newAccessToken);
                return queryWithAccessToken(queryOptions, newAccessToken);
            }
            return Promise.resolve({
                error: 'access_token_invalid',
            });
        }
        throw error;
    }
});
//# sourceMappingURL=query.js.map