"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../../constants"));
const regions_1 = require("./regions");
const common_1 = require("../common");
exports.getAllLocales = () => constants_1.default.LOCALES;
exports.getAllLocaleNames = () => {
    const locales = Object.values(constants_1.default.LOCALES);
    const flattenedLocales = [].concat(...locales);
    const localesAsStrings = flattenedLocales.map((locale) => locale.toString());
    return localesAsStrings;
};
exports.getLocalesByRegionId = (regionId) => common_1.getConstantByRegionId(regionId, 'LOCALES');
exports.checkIfLocaleLooksValid = (locale) => {
    const localeRegexPattern = /^(?:[a-z]{2}_[a-z]{2})$/gi;
    const doesLocaleLookValid = localeRegexPattern.test(locale);
    return doesLocaleLookValid;
};
exports.validateLocale = (locale) => {
    const doesLocaleLookValid = exports.checkIfLocaleLooksValid(locale);
    if (!doesLocaleLookValid) {
        throw new RangeError(`${locale} is not a valid parameter for validateLocale()`);
    }
    const lowerCaseLocaleList = exports.getAllLocaleNames().map((localeName) => localeName.toLowerCase());
    const lowerCaseLocale = locale.toLowerCase();
    return lowerCaseLocaleList.includes(lowerCaseLocale);
};
exports.isLocaleValidForRegionId = (locale, regionId) => {
    const lowerCaseLocale = locale.toLowerCase();
    const doesLocaleLookValid = exports.validateLocale(lowerCaseLocale) || false;
    const regionIdAsString = regionId.toString();
    const isRegionIdValid = regions_1.validateRegionId(regionIdAsString);
    if (!doesLocaleLookValid) {
        throw new RangeError(`${locale} is not a valid locale parameter for isLocaleValidForRegionId()`);
    }
    if (!isRegionIdValid) {
        throw new RangeError(`${regionId} is not a valid regionId parameter for isLocaleValidForRegionId()`);
    }
    const localesForRegionId = exports.getLocalesByRegionId(regionId).map((localeName) => localeName.toLowerCase());
    return localesForRegionId.includes(lowerCaseLocale);
};
//# sourceMappingURL=locales.js.map