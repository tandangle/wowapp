"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../../constants"));
exports.getAllRegions = () => constants_1.default.REGIONS;
exports.getAllRegionIds = () => {
    const regionKeys = Object.keys(constants_1.default.REGIONS);
    return regionKeys.map(regionKey => parseInt(regionKey, 10));
};
exports.getAllRegionNames = () => {
    const regionNames = Object.values(constants_1.default.REGIONS);
    const flattenedRegionNames = [].concat(...regionNames);
    return flattenedRegionNames.map((regionName) => regionName.toString());
};
exports.getRegionNameById = (regionId) => {
    const regionIds = Object.keys(constants_1.default.REGIONS);
    const regionIdAsString = regionId.toString();
    const isRegionIdValid = regionIds.includes(regionIdAsString);
    if (!isRegionIdValid) {
        throw new RangeError(`${regionIdAsString} is not a valid parameter for getRegionNameById()`);
    }
    return constants_1.default.REGIONS[regionIdAsString];
};
exports.validateRegionId = (regionId) => {
    try {
        return Boolean(exports.getRegionNameById(regionId));
    }
    catch (error) {
        return false;
    }
};
exports.getRegionIdByName = (regionName) => {
    const regionNameLowercase = regionName.toLowerCase();
    const regions = constants_1.default.REGIONS;
    const regionKeys = Object.keys(regions);
    const regionIdArray = regionKeys.filter(key => regions[key].includes(regionNameLowercase));
    const regionId = Number(regionIdArray[0]) || false;
    if (!regionId) {
        throw new RangeError(`"${regionName}" is not a valid parameter for getRegionIdByName()`);
    }
    return regionId;
};
exports.validateRegionName = (regionName) => {
    try {
        return Boolean(exports.getRegionIdByName(regionName));
    }
    catch (error) {
        return false;
    }
};
//# sourceMappingURL=regions.js.map