"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../../constants"));
const regions_1 = require("./regions");
const common_1 = require("../common");
exports.getAllSc2Realms = () => constants_1.default.SC2_REALMS;
exports.getAllAvailableSc2Realms = () => {
    const sc2Realms = Object.values(constants_1.default.SC2_REALMS);
    const flattenedSc2Realms = [].concat(...sc2Realms);
    return flattenedSc2Realms.filter((el, i, a) => i === a.indexOf(el));
};
exports.getSc2RealmsByRegionId = (regionId) => common_1.getConstantByRegionId(regionId, 'SC2_REALMS');
exports.checkIfSc2RealmLooksValid = (sc2Realm) => {
    const sc2RealmAsString = sc2Realm.toString();
    const sc2RealmRegexPattern = /^([1-9]{1})$/gi;
    const doesSc2RealmLookValid = sc2RealmRegexPattern.test(sc2RealmAsString);
    return doesSc2RealmLookValid;
};
exports.validateSc2Realm = (sc2Realm) => {
    const doesSc2RealmLookValid = exports.checkIfSc2RealmLooksValid(sc2Realm);
    if (!doesSc2RealmLookValid) {
        throw new RangeError(`${sc2Realm} is not a valid parameter for validateSc2Realm()`);
    }
    const sc2RealmList = exports.getAllAvailableSc2Realms();
    const sc2RealmAsNumber = typeof sc2Realm === 'number' ? sc2Realm : parseInt(sc2Realm, 10);
    return sc2RealmList.includes(sc2RealmAsNumber);
};
exports.isSc2RealmValidForRegionId = (sc2Realm, regionId) => {
    const doesSc2RealmLookValid = exports.checkIfSc2RealmLooksValid(sc2Realm);
    const regionIdAsString = regionId.toString();
    const isRegionIdValid = regions_1.validateRegionId(regionIdAsString);
    if (!doesSc2RealmLookValid) {
        throw new RangeError(`${sc2Realm} is not a valid sc2Realm parameter for isSc2RealmValidForRegionId()`);
    }
    if (!isRegionIdValid) {
        throw new RangeError(`${regionId} is not a valid regionId parameter for isSc2RealmValidForRegionId()`);
    }
    const sc2RealmsForRegionId = exports.getSc2RealmsByRegionId(regionId);
    const sc2RealmAsNumber = typeof sc2Realm === 'number' ? sc2Realm : parseInt(sc2Realm, 10);
    return sc2RealmsForRegionId.includes(sc2RealmAsNumber);
};
//# sourceMappingURL=sc2Realms.js.map