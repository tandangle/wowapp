"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = __importDefault(require("../../constants"));
const regions_1 = require("./regions");
const locales_1 = require("./locales");
exports.getAllDefaultLocaleIndexes = () => constants_1.default.DEFAULT_LOCALES;
exports.getDefaultLocaleIndexForRegionId = (regionId) => {
    const regionIdAsString = regionId.toString();
    const isRegionIdValid = regions_1.validateRegionId(regionIdAsString);
    if (!isRegionIdValid) {
        throw new RangeError(`${regionIdAsString} is not a valid parameter for getDefaultLocaleIndexForRegionId()`);
    }
    return constants_1.default.DEFAULT_LOCALES[regionIdAsString];
};
exports.getDefaultLocaleNameForRegionId = (regionId) => {
    const regionIdAsString = regionId.toString();
    const isRegionIdValid = regions_1.validateRegionId(regionIdAsString);
    if (!isRegionIdValid) {
        throw new RangeError(`${regionIdAsString} is not a valid parameter for getDefaultLocaleNameForRegionId()`);
    }
    const defaultLocaleIndex = constants_1.default.DEFAULT_LOCALES[regionIdAsString];
    return constants_1.default.LOCALES[regionId][defaultLocaleIndex];
};
exports.getAllDefaultLocaleNames = () => {
    const allLocales = locales_1.getAllLocales();
    const allLocaleKeys = Object.keys(allLocales);
    return Object.assign({}, ...allLocaleKeys.map(regionId => ({
        [regionId]: exports.getDefaultLocaleNameForRegionId(regionId),
    })));
};
//# sourceMappingURL=defaultLocales.js.map