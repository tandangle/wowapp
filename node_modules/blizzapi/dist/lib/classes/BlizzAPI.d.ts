import BattleNetAPI from './abstract/BattleNetAPI';
import { BattleNetOptions, AccessTokenOptions } from '../../../@interfaces';
export interface BlizzAPIOptions extends BattleNetOptions, AccessTokenOptions {
}
export default class BlizzAPI extends BattleNetAPI {
    readonly options: AccessTokenOptions;
    constructor(options: BlizzAPIOptions);
    query: (endpoint: string) => Promise<any>;
    static getAllRegions: () => Readonly<import("../../../@interfaces").RegionIdProperties<import("../../../@types").RegionNameArray>>;
    static getAllRegionIds: () => import("../../../@types").RegionIdArray;
    static getAllRegionNames: () => string[];
    static getRegionNameById: (regionId: string | number) => import("../../../@types").RegionNameArray;
    static validateRegionId: (regionId: string | number) => boolean;
    static getRegionIdByName: (regionName: string) => number;
    static validateRegionName: (regionName: string) => boolean;
    static getAllLocales: () => Readonly<import("../../../@interfaces").RegionIdProperties<import("../../../@types").LocaleArray>>;
    static getAllLocaleNames: () => string[];
    static getLocalesByRegionId: (regionId: string | number) => import("../../../@types").LocaleArray;
    static checkIfLocaleLooksValid: (locale: string) => boolean;
    static validateLocale: (locale: string) => boolean;
    static isLocaleValidForRegionId: (locale: string, regionId: string | number) => boolean;
    static getAllSc2Realms: () => Readonly<import("../../../@interfaces").RegionIdProperties<import("../../../@types").Sc2RealmArray>>;
    static getAllAvailableSc2Realms: () => import("../../../@types").Sc2RealmList;
    static getSc2RealmsByRegionId: (regionId: string | number) => import("../../../@types").Sc2RealmList;
    static checkIfSc2RealmLooksValid: (sc2Realm: string | number) => boolean;
    static validateSc2Realm: (sc2Realm: string | number) => boolean;
    static isSc2RealmValidForRegionId: (sc2Realm: string | number, regionId: string | number) => boolean;
    static getDefaultLocaleNameForRegionId: (regionId: string | number) => string;
    static getAllDefaultLocaleNames: () => import("../../../@interfaces").RegionIdProperties<string>;
}
//# sourceMappingURL=BlizzAPI.d.ts.map