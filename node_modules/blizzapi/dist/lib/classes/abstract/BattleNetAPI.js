"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuth2API_1 = __importDefault(require("./OAuth2API"));
const OAuthHelpers = __importStar(require("../../helpers/oauth"));
class BattleNetAPI extends OAuth2API_1.default {
    constructor(options) {
        super(options.clientId, options.clientSecret);
        this.getAccessToken = () => (this.accessToken || this.setAccessToken());
        this.setAccessToken = () => __awaiter(this, void 0, void 0, function* () {
            return (this.accessToken = yield OAuthHelpers.getAccessToken({
                region: this.region,
                clientId: this.clientId,
                clientSecret: this.clientSecret,
            }));
        });
        this.region = options.region;
        this.accessToken = options.accessToken || undefined;
    }
}
exports.default = BattleNetAPI;
BattleNetAPI.validateAccessToken = (region, accessToken) => OAuthHelpers.validateAccessToken(region, accessToken);
;
//# sourceMappingURL=BattleNetAPI.js.map